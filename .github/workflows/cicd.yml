name: CI/CD Pipeline

on:
    push:
        branches:
            - main

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 0

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "23"

            - name: Execute build script
              run: |
                  chmod +x ./build.sh
                  ./build.sh

            - name: Ensure build output exists
              run: ls ./

            - name: Upload Build Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifact
                  path: ./build.zip

    deploy:
        name: Deploy
        needs: build
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 0

            - name: Download Build Artifact
              uses: actions/download-artifact@v4
              with:
                  name: build-artifact

            - name: Verify downloaded artifact
              run: ls ./

            - name: Set up SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_KEY }}

            - name: Verify file operations
              run: |
                  echo "Current directory structure:"
                  ls -l ./
                  file ./build.zip
                  file /home/www/deploying/build.zip

            - name: Deploy application
              env:
                  PUBLIC_IP: ${{ secrets.PUBLIC_IP }}
              run: |
                  scp -o 'StrictHostKeyChecking=no' ./build.zip root@$PUBLIC_IP:/home/torrin.me/build.zip
                  ssh -o "StrictHostKeyChecking=no" root@$PUBLIC_IP "
                      # Ensure DBus and XDG environment variables are set for root
                      export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u root)/bus
                      export XDG_RUNTIME_DIR=/run/user/$(id -u root)

                      # Initialize DBus session if dbus-launch is available
                      if command -v dbus-launch > /dev/null; then
                          dbus-launch --sh-syntax --exit-with-session
                      fi

                      # Proceed with deployment steps
                      mkdir /home/torrin.me/deploying
                      unzip -o -qq /home/torrin.me/build.zip -d /home/torrin.me/deploying
                      rm -r /home/torrin.me/build.zip

                      systemctl daemon-reload

                      mv /home/torrin.me/deploying/build /home/torrin.me/build.new
                      rm -r /home/torrin.me/deploying
                      cd /home/torrin.me/build.new/

                      # Stop service
                      systemctl stop torrin || echo 'skipped stop torrin'

                      # Clean up old builds
                      rm -r /home/torrin.me/build.old | true
                      mv /home/torrin.me/build /home/torrin.me/build.old
                      mv /home/torrin.me/build.new /home/torrin.me/build

                      chmod +x /home/torrin.me/build/run.sh

                      # Enable and start the service under root
                      systemctl enable --now torrin
                  "
